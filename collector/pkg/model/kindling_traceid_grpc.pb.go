// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: kindling_traceid.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TraceIdService_SendTraceIds_FullMethodName = "/kindling.TraceIdService/SendTraceIds"
)

// TraceIdServiceClient is the client API for TraceIdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraceIdServiceClient interface {
	SendTraceIds(ctx context.Context, in *TraceIds, opts ...grpc.CallOption) (*TraceIds, error)
}

type traceIdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceIdServiceClient(cc grpc.ClientConnInterface) TraceIdServiceClient {
	return &traceIdServiceClient{cc}
}

func (c *traceIdServiceClient) SendTraceIds(ctx context.Context, in *TraceIds, opts ...grpc.CallOption) (*TraceIds, error) {
	out := new(TraceIds)
	err := c.cc.Invoke(ctx, TraceIdService_SendTraceIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TraceIdServiceServer is the server API for TraceIdService service.
// All implementations must embed UnimplementedTraceIdServiceServer
// for forward compatibility
type TraceIdServiceServer interface {
	SendTraceIds(context.Context, *TraceIds) (*TraceIds, error)
	mustEmbedUnimplementedTraceIdServiceServer()
}

// UnimplementedTraceIdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTraceIdServiceServer struct {
}

func (UnimplementedTraceIdServiceServer) SendTraceIds(context.Context, *TraceIds) (*TraceIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTraceIds not implemented")
}
func (UnimplementedTraceIdServiceServer) mustEmbedUnimplementedTraceIdServiceServer() {}

// UnsafeTraceIdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraceIdServiceServer will
// result in compilation errors.
type UnsafeTraceIdServiceServer interface {
	mustEmbedUnimplementedTraceIdServiceServer()
}

func RegisterTraceIdServiceServer(s grpc.ServiceRegistrar, srv TraceIdServiceServer) {
	s.RegisterService(&TraceIdService_ServiceDesc, srv)
}

func _TraceIdService_SendTraceIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraceIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceIdServiceServer).SendTraceIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TraceIdService_SendTraceIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceIdServiceServer).SendTraceIds(ctx, req.(*TraceIds))
	}
	return interceptor(ctx, in, info, handler)
}

// TraceIdService_ServiceDesc is the grpc.ServiceDesc for TraceIdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TraceIdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kindling.TraceIdService",
	HandlerType: (*TraceIdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTraceIds",
			Handler:    _TraceIdService_SendTraceIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kindling_traceid.proto",
}
