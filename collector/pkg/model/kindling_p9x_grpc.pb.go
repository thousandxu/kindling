// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: pkg/model/kindling_p9x.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P9XService_QueryP9X_FullMethodName = "/kindling.P9XService/QueryP9x"
)

// P9XServiceClient is the client API for P9XService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P9XServiceClient interface {
	QueryP9X(ctx context.Context, in *P9XRequest, opts ...grpc.CallOption) (*P9XResponse, error)
}

type p9XServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP9XServiceClient(cc grpc.ClientConnInterface) P9XServiceClient {
	return &p9XServiceClient{cc}
}

func (c *p9XServiceClient) QueryP9X(ctx context.Context, in *P9XRequest, opts ...grpc.CallOption) (*P9XResponse, error) {
	out := new(P9XResponse)
	err := c.cc.Invoke(ctx, P9XService_QueryP9X_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P9XServiceServer is the server API for P9XService service.
// All implementations must embed UnimplementedP9XServiceServer
// for forward compatibility
type P9XServiceServer interface {
	QueryP9X(context.Context, *P9XRequest) (*P9XResponse, error)
	mustEmbedUnimplementedP9XServiceServer()
}

// UnimplementedP9XServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP9XServiceServer struct {
}

func (UnimplementedP9XServiceServer) QueryP9X(context.Context, *P9XRequest) (*P9XResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryP9X not implemented")
}
func (UnimplementedP9XServiceServer) mustEmbedUnimplementedP9XServiceServer() {}

// UnsafeP9XServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P9XServiceServer will
// result in compilation errors.
type UnsafeP9XServiceServer interface {
	mustEmbedUnimplementedP9XServiceServer()
}

func RegisterP9XServiceServer(s grpc.ServiceRegistrar, srv P9XServiceServer) {
	s.RegisterService(&P9XService_ServiceDesc, srv)
}

func _P9XService_QueryP9X_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P9XRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P9XServiceServer).QueryP9X(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P9XService_QueryP9X_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P9XServiceServer).QueryP9X(ctx, req.(*P9XRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P9XService_ServiceDesc is the grpc.ServiceDesc for P9XService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P9XService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kindling.P9XService",
	HandlerType: (*P9XServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryP9x",
			Handler:    _P9XService_QueryP9X_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/model/kindling_p9x.proto",
}
